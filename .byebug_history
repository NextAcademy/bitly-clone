exit
good_urls
random_short
exit
Url.longUrl
longUrl
Url[:longUrl]
Url[:longUr]l
Url.longUrl
params[:longUrl]
Url.last
url.last
good_urls
Url.new(longUrl: "https://www.facebook.com")
url.last
good_urls
good
good_urls.map {|url| url.pop()}
good_urls.pop()
good_urls
good_urls.map {|url| url.pop()}
good_urls.map {|url| url <<"héhé"}
url.pop()
url.pop
good_urls.map {|url| url <<"héhé"}
good_urls.map {|url| url << url.shortUrl}
url.shortUrl = url.shorten
url = Url.new()
url.shortUrl = url.shorten
good_urls.map {|url| url << url.shorten}
good_urls.map {|url| url << shortUrl.shorten}
good_urls.map {|url| url << "hqhqh"}
good_urls
ood_urls
urls
c
exit
urls.map {|url| url.compact}
urls.compact
urls
c
Url.import columns, urls
urls
urls`
exit
@error[0]
@error
n
exit
url.errors.messages[:longUrl]
@error
exit
url.save
exit
url.save
exit
@error[0]
@error[1]
@error
n.error
@error.each do |n|
if !@error.nil?
@error[0]
error[0]
@error[0]
url.errors.messages[:longUrl]
url.errors.message[:longUrl]
exit
@error
puts @error
p @error
print @error
url.errors
Url.errors
error
errors
@error
url.errors.messages[:longUrl]
exit
@error
url.errors.messages[:longUrl]
url.errors.messages[:long_url]
messages[:long_url]
message[:long_url]
@error
message[:longUrl]
messages[:longUrl]
exit
url.errors.messages[:longUrl]
url.errors.message[:longUrl]
:message
params[:message]
url.messages[:longUrl]
url.message[:longUrl]
message[:longUrl]
exit
url.clickCount
n
exit
Url.find_by(shortUrl: params[:shortUrl])
 params[:shortUrl]
 params[:short_url]
params[:shortUrl]
params[shortUrl]
